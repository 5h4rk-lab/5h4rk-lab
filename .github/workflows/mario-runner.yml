# .github/workflows/mario-runner.yml
name: Mario Runner

on:
  workflow_dispatch:
  push:
    branches: [ master, main ]
  schedule:
    - cron: "0 */12 * * *"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pillow requests

      - name: Generate mario runner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USER: 5h4rk-lab
        shell: bash
        run: |
          python - <<'PY'
          import os, sys, json, math, requests
          from PIL import Image, ImageDraw

          USERNAME = os.getenv("GITHUB_USER","").strip()
          TOKEN = os.getenv("GITHUB_TOKEN","").strip()
          DAYS = 365
          CELL, GAP, PADDING = 12, 2, 8
          FPS = 18
          STEP_PER_FRAME = 1

          if not USERNAME or not TOKEN:
              print("Missing GITHUB_USER or GITHUB_TOKEN", file=sys.stderr); sys.exit(1)

          q = '''
          query($login:String!) {
            user(login:$login) {
              contributionsCollection {
                contributionCalendar {
                  weeks { contributionDays { date contributionLevel } }
                }
              }
            }
          }'''
          r = requests.post(
              "https://api.github.com/graphql",
              headers={"Authorization": f"Bearer {TOKEN}"},
              json={"query": q, "variables": {"login": USERNAME}},
              timeout=30,
          ); r.raise_for_status()
          weeks = r.json()["data"]["user"]["contributionsCollection"]["contributionCalendar"]["weeks"]

          days = [d for w in weeks for d in w["contributionDays"]][-DAYS:]
          cols = max(1, math.ceil(len(days)/7)); rows = 7

          palette = {
              "NONE": (235,237,240),
              "FIRST_QUARTILE": (198,228,139),
              "SECOND_QUARTILE": (123,201,111),
              "THIRD_QUARTILE": (35,154,59),
              "FOURTH_QUARTILE": (25,97,39),
          }

          W = PADDING*2 + cols*CELL + (cols-1)*GAP
          H = PADDING*2 + rows*CELL + (rows-1)*GAP

          grid = [[{"level":"NONE"} for _ in range(cols)] for __ in range(rows)]
          for i, d in enumerate(days):
              c, r0 = i // rows, i % rows
              grid[r0][c]["level"] = d["contributionLevel"]

          def draw_cell(draw, row, col, fill):
              x = PADDING + col*(CELL+GAP)
              y = PADDING + row*(CELL+GAP)
              draw.rectangle([x, y, x+CELL-1, y+CELL-1], fill=fill)

          bg = Image.new("RGBA", (W,H), (255,255,255,0))
          bgd = ImageDraw.Draw(bg)
          for rr in range(rows):
              for cc in range(cols):
                  draw_cell(bgd, rr, cc, palette.get(grid[rr][cc]["level"], palette["NONE"]))

          runner_frames = [
              {(1,1),(2,1),(3,1),(2,2),(1,3),(2,3),(3,3),(2,4),(0,5),(1,5),(2,5),(3,6)},
              {(1,1),(2,1),(3,1),(2,2),(1,3),(2,3),(3,3),(2,4),(1,6),(2,6),(3,6),(0,5)},
          ]
          runner_color, boots_color = (220,60,60), (60,60,60)

          def draw_runner(img, px, py, frame_idx):
              shadow = Image.new("RGBA", img.size, (0,0,0,0))
              sd = ImageDraw.Draw(shadow)
              sd.ellipse([px-2, py+8, px+10, py+12], fill=(0,0,0,70))
              img.alpha_composite(shadow)
              dr = ImageDraw.Draw(img)
              pose = runner_frames[frame_idx % len(runner_frames)]
              for (dx,dy) in pose:
                  dr.rectangle([px+dx, py+dy, px+dx, py+dy], fill=runner_color)
              dr.rectangle([px+2, py+7, px+3, py+7], fill=boots_color)

          path = []
          for c in range(cols):
              rng = range(rows) if c % 2 == 0 else range(rows-1,-1,-1)
              for r0 in rng: path.append((r0,c))
          path = path[-len(days):]

          def cell_center(row, col):
              x = PADDING + col*(CELL+GAP) + CELL//2 - 4
              y = PADDING + row*(CELL+GAP) + CELL//2 - 6
              return x, y

          frames = []
          steps = max(2, len(path))
          for i in range(0, steps, STEP_PER_FRAME):
              frame = bg.copy()
              x, y = cell_center(*path[i])
              draw_runner(frame, x, y, i)
              frames.append(frame)

          os.makedirs("dist", exist_ok=True)
          out = "dist/mario.gif"
          frames[0].save(out, save_all=True, append_images=frames[1:], duration=int(1000/FPS), loop=0, optimize=False)
          print(f"Wrote {out} ({len(frames)} frames, {W}x{H})")
          PY

      - name: Upload artifact (debug)
        uses: actions/upload-artifact@v4
        with:
          name: mario-dist
          path: dist

      - name: Publish to output branch
        uses: crazy-max/ghaction-github-pages@v4
        with:
          target_branch: output
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
